
=head1 Improve Parrot Embed/Extend Subsystem Tests and Documentation

=over 1

=item Name:

Jonathan "Duke" Leto.

=item Email:

jonathan@leto.net

=item Amount Requested:

$1500

=back

=head2 Synopsis

Currently the Parrot Embedding subsystem is under-tested and under-documented.
This grant proposes to add documentation for all public Embed/Extend API
functions, write tests to increase the code coverage statistics for the
Embed/Extend API to at least 95%, and update the Parrot Developer Docs (PDDs)
where errors or omissions are found. Any bugs found on the way that cannot be
easily fixed will be reported on the Parrot Trac bug-tracker with test cases.

=head2 Benefits to the Perl Community

There are many projects that will benefit from a completely documentated and
thoroughly tested Parrot Embed Subsystem. Rakudo Perl 6 is built on Parrot, so
people who want to embed Rakudo Perl 6 in any other application will benefit.
Blizkost is a bridge between Perl 5 and Parrot, and embeds both, so will greatly
benefit from good documentation and tests.  PL/Parrot is a project that aims to
embed Parrot in the PostgreSQL database. Because Parrot is embedded in
PostgreSQL, any language that runs on Parrot then can easily be embedded.
PL/Perl6 is part of the PL/Parrot project, which loads Rakudo Perl 6 bytecode
and therefore embeds a Perl 6 interpreter inside of PostgreSQL, for use in
writed stored procedures. All of these projects will grealy benefit from
complete documentation, as well any any future applications that want to embed
or extend Parrot.


=head2 Deliverables

Code coverage for the Embed/Extend API can be found at:

http://tapir2.ro.vutbr.cz/cover/cover-results/

According to the code coverage stats for Parrot SVN r48100, the code coverage
of src/embed.c is 65.2%, src/extend.c is 71.2% and src/extend_vtable.c is 5.3%.
All of these will be raised to at least 95% by writing the appropriate tests.

The embed API documentation in docs/embed.pod contains many parts which are missing
documentation, such as the "Lexicals", "Type Signatures" and "Constants" sections.
This will be filled with the appropriate documenation as it works currently.

L<http://docs.parrot.org/parrot/devel/html/docs/embed.pod.html>

=head2 Project Details

Currently only about 5 of over 180 functions in src/extend_vtable.c have
test coverage. This will likely require around 50 tests fully cover
each function, but this number can vary depending on the size of a test. The
majority of these tests are simply calling a variety of VTABLE functions
on PMCs, so each test has roughly the same structure. These tests will be
added to t/src/extend_vtable.t (a new test file) and written in Perl 5.

The test coverage for src/embed.c and src/extend.c is much higher, so fewer
tests will be required, but these tests will be more complicated due to the
necessity of testing corner cases. Much of the uncovered code in src/embed.c
relates to dealing packfiles and bytecode, error handling with I/O and using
non-default runcores. These tests will be added to t/src/embed.t and
t/src/extend.t, respectively, and written in Perl 5.

The documentation part of this grant should be straight-forward, but anything
that needs to be clarified will be put to the parrot-dev mailing list.

=head2 Inch-stones

The first inch-stone will be updating docs/embed.pod to contain the "Lexicals",
"Type Signatures" and "Constants" sections. This should take one to two weeks.

The next two inch-stones will be to raise extend_vtable.c to 50% and then 95%
coverage. This splits the work roughly in half, and I expect each to take
roughly 2 weeks.

=head2 Project Schedule

I expect to be able to work about 5-10 hours per week, starting in October,
so it does not conflict with Google Summer of Code. I expect that at this
pace, this grant will take about 2-3 months to finish, taking into account
that I may not work as much near the holidays.

=head2 Completeness Criteria

Since this work will not change any features, it can be committed directly
to Parrot SVN trunk incrementally. When the code coverage statistics have
all reached >= 95% and the missing sections of documentation have been written,
this grant will be considered complete.

=head2 Bio

I've hacked on Parrot Virtual Machine ever since I attended a Parrot Hackathon
in 2008. I started off hacking on the Perl 6 test suite, after getting a commit
bit from Larry at the hackathon due to my interest in fixing some bugs and
adding tests relating to math functions and complex numbers. This quickly led me
to bugs in Parrot, and I have mostly been writing tests and fixing bugs for the
Parrot test suite ever since. I have converted large partions of the test suite
from Perl 5 to PIR, as well as implementing parts of Test::More and a TAP Parser
in PIR.

I also hack on a project called PL/Parrot, which embeds Parrot into the PostgreSQL
database. It is one of the first projects to embed Parrot in other applications, the
others being mod_parrot and Blizkost. In the course of hacking on PL/Parrot, I have
written tests for the embedd/extend API and fixed documentation.

Since I am a Parrot Core Developer, I can commit directly to Parrot trunk, which
is the best scenario, since everyone will benefit incrementally from better code
coverage and documentation.

=cut
